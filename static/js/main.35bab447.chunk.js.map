{"version":3,"sources":["SnoozeComponents.tsx","App.tsx","index.tsx"],"names":["SnoozeComponents","props","isEarlierThanEndLimit","timeValue","endLimit","lastValue","timeValueIsEarlier","moment","diff","timeValueIsLaterThanLastValue","snoozeTimeOptions","key","text","value","add","format","push","pop","useState","selectedSnoozeTime","setSelectedSnoozeTime","handleSnoozeTimeChange","event","data","snoozeTypeOptions","selectedSnoozeType","setSelectedSnoozeType","handleSnoozeTypeChange","SnoozeInputText","className","SnoozeInputComponents","Dropdown","fluid","selection","options","onChange","SnoozeOutputText","includes","SnoozeOutputComponents","snoozeTimes","tempSelectedTime","i","subtract","Grid","columns","Row","Column","isSubmitted","SubmitButton","Button","color","onClick","RestartButton","App","handleSubmitClick","bind","handleRestartClick","state","this","setState","button","src","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35bab447.chunk.js","sourcesContent":["import React, { useState, SyntheticEvent } from 'react';\nimport { Dropdown, Grid } from 'semantic-ui-react';\nimport moment from 'moment';\nimport './index.css'\n\nexport const SnoozeComponents = (props: any) => {\n\n    // returns if the timeValue is earlier than the endLimit and later than the lastValue\n    const isEarlierThanEndLimit = (timeValue: string, endLimit: string, lastValue: string) => {\n        const timeValueIsEarlier = moment(timeValue, 'h:mmA').diff(moment(endLimit, 'h:mmA')) < 0;\n        const timeValueIsLaterThanLastValue = lastValue === \"\" ? true : moment(lastValue, 'h:mmA').diff(moment(timeValue, 'h:mmA')) < 0;\n        return timeValueIsEarlier && timeValueIsLaterThanLastValue;\n    }\n\n    // defining the time attributes\n    let timeValue = \"12:00AM\";\n    let lastValue = \"\";\n    const endLimit = \"11:59PM\";\n    const step = 30;\n\n    const snoozeTimeOptions = [{ key: timeValue, text: timeValue, value: timeValue }];\n\n    // populate the times from the timeValue to the endLimit\n    while (isEarlierThanEndLimit(timeValue, endLimit, lastValue)) {\n        lastValue = timeValue;\n        timeValue = moment(timeValue, 'h:mmA').add(step, 'minutes').format('h:mmA');\n        snoozeTimeOptions.push({ key: timeValue, text: timeValue, value: timeValue });\n    }\n    snoozeTimeOptions.pop();\n\n    // hook for selected snooze time from dropdown\n    const [selectedSnoozeTime, setSelectedSnoozeTime] = useState(snoozeTimeOptions[17]);\n\n    const handleSnoozeTimeChange = (event: SyntheticEvent<HTMLElement>, data: any) => {\n        setSelectedSnoozeTime({\n            key: data.value,\n            text: data.value,\n            value: data.value\n        });\n    }\n\n    // values for snooze type dropdown\n    const snoozeTypeOptions = [\n        {\n            key: \"I need to wake up by...\",\n            text: \"I need to wake up by...\",\n            value: \"I need to wake up by...\"\n        },\n        {\n            key: \"I plan to sleep by...\",\n            text: \"I plan to sleep by...\",\n            value: \"I plan to sleep by...\"\n        }\n    ];\n\n    // hook for snooze time dropdown\n    const [selectedSnoozeType, setSelectedSnoozeType] = useState(snoozeTypeOptions[0]);\n\n    const handleSnoozeTypeChange = (event: SyntheticEvent<HTMLElement>, data: any) => {\n        setSelectedSnoozeType({\n            key: data.value,\n            text: data.value,\n            value: data.value\n        });\n    }\n\n    // description text for input screen\n    const SnoozeInputText: React.FC = () => {\n        return (\n            <label>\n                Find out when you should\n                <span className='highlight'> sleep </span>\n                    or\n                <span className='highlight'> wake up </span>\n                    by to get that good nightâ€™s sleep!\n            </label>\n        );\n    }\n\n    // drop down components for input screen\n    const SnoozeInputComponents: React.FC = () => {\n        return (\n            <div>\n                <div className='textPadding'><SnoozeInputText /></div>\n                <div className='dropdown'>\n                    <Dropdown\n                        fluid\n                        selection\n                        value={selectedSnoozeType.value}\n                        options={snoozeTypeOptions}\n                        onChange={handleSnoozeTypeChange}\n                    />\n                </div>\n                <div className='dropdown'>\n                    <Dropdown\n                        fluid\n                        selection\n                        value={selectedSnoozeTime.value}\n                        options={snoozeTimeOptions}\n                        onChange={handleSnoozeTimeChange}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    // description text for output screen depending on snooze type\n    const SnoozeOutputText: React.FC = () => {\n        if (selectedSnoozeType.value.includes('wake')) {\n            return (\n                <label>\n                    To wake up refreshed at\n                    <span className='highlight'> {selectedSnoozeTime.value}</span>\n                    , I need to fall asleep at one of these times:\n                </label>\n            );\n        }\n        return (\n            <label>\n                To sleep at\n                <span className='highlight'> {selectedSnoozeTime.value}</span>\n                , you should wake up at these times to feel refreshed:\n            </label>\n        );\n    }\n\n    // grid component for snooze time output\n    const SnoozeOutputComponents: React.FC = () => {\n        // Calculate snooze times based on inputted time\n        const snoozeTimes = [];\n        const sleepCycleStep = 90;\n        const tempSelectedTime = moment(selectedSnoozeTime.value, 'h:mmA');\n\n        for (let i = 1; i < 7; i++) {\n            if (selectedSnoozeType.value.includes('wake')) {\n                // calculate wake up times\n                snoozeTimes.push(moment(tempSelectedTime, 'h:mmA').subtract(sleepCycleStep * (i), \"minutes\").format('h:mmA'));\n            } else {\n                // calculate sleep by times\n                snoozeTimes.push(moment(tempSelectedTime, 'h:mmA').add(sleepCycleStep * (i), \"minutes\").format('h:mmA'));\n            }\n        }\n\n        // display grid of resulting snooze times\n        return (\n            <div>\n                <div className='textPadding'><SnoozeOutputText /></div>\n                <div className='ui one column stackable center aligned page grid'>\n                    <Grid columns={3}>\n                        <Grid.Row>\n                            <Grid.Column>\n                                <label className='highlight'>{snoozeTimes[5]}</label>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <label className='highlight'>{snoozeTimes[4]}</label>\n                            </Grid.Column>\n                            <Grid.Column>\n                                {snoozeTimes[3]}\n                            </Grid.Column>\n                        </Grid.Row>\n\n                        <Grid.Row>\n                            <Grid.Column>\n                                {snoozeTimes[2]}\n                            </Grid.Column>\n                            <Grid.Column>\n                                {snoozeTimes[1]}\n                            </Grid.Column>\n                            <Grid.Column>\n                                {snoozeTimes[0]}\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </div>\n            </div>\n        );\n    }\n\n    const isSubmitted: boolean = props.isSubmitted;\n    if (!isSubmitted) {\n        return <SnoozeInputComponents />\n    }\n    return <SnoozeOutputComponents />;\n}","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { SnoozeComponents } from './SnoozeComponents';\nimport './index.css'\n\nconst SubmitButton = (props: any) => {\n  return (\n    <Button color='yellow' onClick={props.onClick}>\n      Calculate Snooze Times\n    </Button>\n  );\n}\n\nconst RestartButton = (props: any) => {\n  return (\n    <Button color='yellow' onClick={props.onClick}>\n      Calculate Again\n    </Button>\n  );\n}\n\nclass App extends React.Component<{}, { isSubmitted: boolean }> {\n  constructor(props: any) {\n    super(props);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n    this.handleRestartClick = this.handleRestartClick.bind(this);\n    this.state = { isSubmitted: false }\n  }\n\n  handleSubmitClick() {\n    this.setState({ isSubmitted: true });\n  }\n\n  handleRestartClick() {\n    this.setState({ isSubmitted: false });\n  }\n\n  render() {\n    const isSubmitted = this.state.isSubmitted;\n    let button = !isSubmitted ? <SubmitButton onClick={this.handleSubmitClick} /> :\n      <RestartButton onClick={this.handleRestartClick} />;\n\n    return (\n      <div>\n        <div className='center'>\n          <img src='https://www.clipartbay.com/cliparts/crescent-moon-clipart-free-v7vkxfs.png' alt='Crescent moon' />\n        </div>\n        <div>\n          <h1 className=\"title\">Sleep Calculator</h1>\n          <SnoozeComponents isSubmitted={isSubmitted} />\n        </div>\n        <div className='button'>\n          {button}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"semantic-ui-css/semantic.min.css\"\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('container')\n);\n"],"sourceRoot":""}